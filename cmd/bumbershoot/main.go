package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
)

const template = `// +build umbrella_testrunmain

// GENERATED by github.com/rosenhouse/umbrella/cmd/bumbershoot
// You may check this file into your source control.

package main

import (
	"flag"
	"os"
	"testing"
)

func TestRunWithUmbrellaCoverage(t *testing.T) {
	main()
	os.Stdout, _ = os.Create(os.DevNull)
}

func TestMain(m *testing.M) {
	prepCoverage()
	os.Exit(m.Run())
}

// path to save coverage data
// Build will override this at link-time, e.g.
//    go build -ldflags '-X yourprogram.coverProfilePath=/tmp/some/path'
var coverProfilePath = ""

func prepCoverage() {
	if coverProfilePath != "" {
		flag.Set("test.coverprofile", coverProfilePath)
	}
	flag.Set("test.run", "TestRunWithUmbrellaCoverage")
	origArgs := os.Args[1:]
	os.Args = append([]string{os.Args[0], "spacer"}, origArgs...)
	flag.Parse()
	os.Args = append([]string{os.Args[0]}, origArgs...)
}
`

const defaultHookFileName = "umbrella_hook_test.go"

func main() {
	var outPath string
	flag.StringVar(&outPath, "o", defaultHookFileName, "output file path")
	flag.Parse()

	err := ioutil.WriteFile(outPath, []byte(template), 0600)
	if err != nil {
		fmt.Fprintf(os.Stderr, "bumbershoot: %s", err)
		os.Exit(1)
	}

	fmt.Fprintf(os.Stdout, "bumbershoot: generated umbrella hook at %s\n", outPath)
}
